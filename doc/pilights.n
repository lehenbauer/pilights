.TH pilights n 1.1 "Tcl-Extensions"
.HS pilights tcl
.BS
.SH NAME
pilights \- tcl interface to do fancy things with LED vectors.
.SH SYNOPSIS
\fBpackage require pilights\fR
.PP
\fBpilights create\fI objName nLights nRows\fR
.br
.PP
\fIobjName\fB nLights\fR
.br
\fIobjName\fB nRows\fR
.br
\fIobjName\fB open\fI spiDevice\fR
.br
\fIobjName\fB close\fR
.br
\fIobjName\fB attach_spi\fI tclspiObject\fR
.br
\fIobjName\fB fillrows\fI firstRow nRows r g b\fR
.br
\fIobjName\fB setpixels\fI row firstPixel nPixels r g b\fR
.br
\fIobjName\fB write \fIrow ?nRows? ?delay?\fR
.br
\fIobjName\fB copyrows\fI firstRow destRow nRows\fR
.br
\fIobjName\fB attach_gd\fI tclgdObject\fR
.br
\fIobjName\fB copy_from_image\fI firstRow nRows y x firstPixel nPixels\fR
.br
\fIobjName\fB getrow\fI row\fR
.br
\fIobjName\fB setrow\fI row list\fR
.br
.SH DESCRIPTION
\fIpilights\fR gives Tcl programs the ability to generate sequences for RGB
lights and emit them over the Raspberry Pi's SPI bus to stuff like LPD8806 digital RGB LED strips.
.PP
The \fBpilights create\fR command creates a new Tcl object, prepping it with
arrays of bytes for setting up and sending RGB values to many lights
very quickly.  Latch bytes are preallocated and configured in-place for convenience runtime performance.  The rows are initialized to black or "off", values of zero for all red, green and blue pixels.
.PP
A cool feature, pilights can take pixels from any image the GD library can
handle, including PNG, GIF and JPEG, and emit them to the LED strips.
.PP
Once an object has been created, it can be manipulated via its name,
or if the object name is \fB#auto\fR, a unique command name
is returned and should be grabbed into a variable and executed using a
reference to that variable, in the same manner as Incr Tcl.
.PP
.nf
    pilights create mylights 150 100
    mylights fill 0 100 0 0 255
.fo
.PP
.SH PILIGHTS OBJECT INTROSPECTION FUNCTIONS
.PP
\fIobjName\fB nLights\fR returns the number of lights defined, while
\fIobjName\fB nRows\fR returns the number of rows defined.
.PP
\fBobjName\fB getrow\fI row\fR returns the pixels of the specified as a flat list of red, green and blue values.  If there are 150 lights defined, for instance, a list of 450 integers is returned.
.PP
.SH PIXEL-SETTING FUNCTIONS
.PP
\fIobjName\fB fillrows \fIfirstrow nRows r g b\fR fills the specified rows with the specified RGB colors.  Use 8-bit colors.  They are mapped to 7-bit for emission to the string but we treat the interface as if it is 8-bit.  For example, 255 255 255 is full brightness even though the LED gets values of 127 127 127.
.PP
If \fInRows\fR requests more rows than exist, pilights wraps around to the 0th row and continues from there.
.PP
\fIobjName\fB setpixels\fI row firstPixel nPixels r g b\fR fills pixels within a row with RGB colors.  Use it multiple times with different RGB components, first pixel and number of pixels to create patterns within a row.
.PP
\fIobjName\fB copyrows\fI firstRow destRow nRows\fR copies patterns one row to another.
.PP
.PP
\fIobjName\fB copy_from_image\fI firstRow nRows y x firstPixel nPixels\fR
 reads pixels from a GD library image (probably loaded from a PNG or GIF) using the tcl.gd package.  This allows pixel sequences of nearly unlimited size and complexity to be created and stored efficiently within PNG24 images.
.PP
Before using copy_from_image, attach an existing tclgd image using the \fIattach_gd\fR method.
.PP
Pixels are copied pixel-for-pixel.  If the number of pixels requested runs off the end of one row in the pilights object, copying continues with the first pixel of the next row.  Likewise if the row of pixels in the GD image runs out, pixels continued to be sourced from the Xth pixel in the next row.
.br
\fBobjName\fB setrow\fI row list\fR sets the pixels of the specified row from a flast list of red, green and blue values.  If the list contains fewer than the needed number of values to contain a red, green and blue value for each pixel, it is repeated circularly until all the pixels are set.  If there are three values in the list, for instance, each pixel will be set to the same red, green and blue values.  If there are six values, the pixels will alternate in pairs.
.PP
For sanity, the list must contain a minimum of three elements and its length must be a multiple of three.
.PP
Note that since the RGB values are stored lamp-ready and retrieved from that state, the least significant bit of the eight-bit color that was originally set is lost.  A pixel value of one is returned as zero, a pixel value of two or three is returned as two, and so on.
.PP
.SH SPI INTERFACE ATTACHING AND DETACHING
To open an SPI device for writing, use \fIobjName\fB open\fI spiDevice\fR.  On the Raspberry Pi, \fIspiDevice\fR is typically \fB/dev/spidev0.0\fR.  This opens configures the SPI interface to default values of read and write SPI mode 0, 8-bits per word, and a speed of two megahertz.
.PP
If you wish to use values other than the above, use tclspi to set up the SPI interface in conjunction with the attach_spi method described below.
.PP
\fIobjName\fB attach_spi\fI tclspiObject\fR attaches a tclspi object as the source of the SPI device to be talked to.  tclspi can set other modes, bits-per-word and speeds.  See the playpen directory for an example.
.PP
Whether attaching the SPI device using the \fIopen\fR method or the \fIattach_spi\fR method, \fIobjName\fB close\fR will close the connection.  If you used pilight's open method then the connection to the device is truly closed.  If you used a tclspi object then the connection is merely detached from the pilights object -- close the device using tclspi when desired.
.PP
It is safe to open a device while one is already open.  pilights will close (or detach) the existing device if it is open.
.PP
.SH WRITING TO LEDs
.PP
To write to LEDs using the SPI bus, you must have opened an SPI device or attached a tclspi object that's got one open.  Set up a tclspi object for talking to the SPI bus by doing a \fIpackage require spi\fR and \fIset spi [spi #auto /dev/spidev0.0]\fR.  
.PP
Write a row of pixels to the SPI bus using \fIobjName\fB write \fIrow ?nRows? ?delay?\fR.  \fIrow\fR is the row number.  \fInRows\fR, if present, specifies the number of rows to write, interating sequentially through the rows.  If absent, only a single row is emitted.
.PP
\fIDelay\fR is the delay in microseconds, part of the argument block sent to the SPI device driver using an ioctl call that pilights uses to talk to the SPI hardware.  The default delay is zero.
.PP
More to come...
